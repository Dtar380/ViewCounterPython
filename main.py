from os.path import exists, isfile
from os import makedirs, umask
from flask import Flask, request
from requests import get

GITHUB = "https://github.com" # Github url as a constant

app = Flask(__name__) # Flask app

# Updates the count on the given file_path
def update_count(file_path: str) -> int:

    # If the file does not exist create it and return 1
    if not exists(file_path) or not isfile(file_path):
        path = "/".join(file_path.split("/")[0:2]) # Creates the path to store the .txt for user repos
        makedirs(path, mode=0o777, exist_ok=True) # Creates the directories from the path generated

        # Creates the file and saves a 1
        with open(file_path, "w+") as f:
            f.write("1")

        return 1

    # Open the file and read the value
    with open(file_path, "r+") as f:
        data = f.read()

    # If theres a number, add 1, else set it to 1
    number = int(data) + 1

    # Write new number
    with open(file_path, "w+") as f:
        f.write(str(number))

    return number

# Function to transform long numbers to readable
def short_number(number: int) -> str:
    units = ["", "K", "M", "B", "T", "Q"] # Units up to Quadrillion

    # Iterate through all units
    for unit in units:
        if number <= 1000: # If the number is lower than 1000, break
            break
        number /= 1000 # Divide the number by 1000

    return f"{round(number, 1)}{unit}" # return the number with one rounded decimal and the unit in which it stopped

# transforms a dictionary into url
def create_url(params: dict) -> str:
    message: str = ""

    for key, value in params.items():
        message += f"{key}={value}&"
    
    return message

# Creates the url for custom-icon-badges.demolab.com to later get the SVG
def retrieve_url(query, user: str, repo: str = None) -> str:

    # Check if user and repo exists if given
    if user and get(f"{GITHUB}/{user}").status_code != 200:
        return "No such user found"
    if repo and get(f"{GITHUB}/{user}/{repo}").status_code != 200:
        return "No such repository found"

    # If theres only user query, update the user file, else update both repo and user
    if not repo:
        number = update_count(f"data/{user}/{user}.txt")
    else:
        update_count(f"views/{user}/{user}.txt")
        number = update_count(f"data/{user}/r_{repo}.txt")

    # Generate parameters for the badge
    params = {
        "label": query.get("label") if query.get("label") else "Visitors",
        "labelColor": query.get("labelColor") if query.get("labelColor") else "C79600",
        "logo": query.get("logo") if query.get("logo") else "eye",
        "logoColor": query.get("logoColor") if query.get("logoColor") else "white",
        "message": short_number(number),
        "color": query.get("color") if query.get("color") else "E1AD0E",
        "style": query.get("style") if query.get("style") else "for-the-badge"
    }

    # Create a url for custom-icon-badges.demolab.com
    url = "https://custom-icon-badges.demolab.com/static/v1?" + create_url(params)

    return url

# Returns the svg generated by custom-icon-badges.demolab.com
# for the view count of the repo given with the given query parameters
@app.route("/<user>/<repo>")
def give_views_url(user: str, repo: str):
    return get(url=retrieve_url(request.args, user, repo)).text

# Returns the svg generated by custom-icon-badges.demolab.com
# for the view count of the user given with the given query parameters
@app.route("/<user>/")
def get_profile_views(user: str):
    return get(url=retrieve_url(request.args, user)).text

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=3000, debug=True)